# Released under the MIT License (https://opensource.org/licenses/MIT)
#
# Copyright (c) 2017 Ricardo Silva.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
# associated documentation files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute,
# sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
# NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
# OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

"""Cryptopals Challenges: Test Challenge 33: Implement Diffie-Hellman."""

import sys
import utils.cp_aux_utils as utils

title = "Challenge 33: Implement Diffie-Hellman"

def execute_test_dh(pg_pairs):
    """Execute testing of Diffie-Hellman session key generation for different (p, g) pairs."""

    out_res = []
    for pg_pair in pg_pairs:
        p = pg_pair[0]
        g = pg_pair[1]
        # Generate public and secret key for "A" (Alice).
        (a, A) = utils.dh_keys(p, g)
        # Generate public and secret key for "B" (Bob).
        (b, B) = utils.dh_keys(p, g)
        # Session key generated by Alice.
        sA = utils.dh_session_key(B, a, p)
        # Session key generated by Bob.
        sB = utils.dh_session_key(A, b, p)
        out_res += [(a, A, b, B, sA, sB)]

    return out_res

if __name__ == '__main__':
    try:
        me = sys.argv[0]
        in_pg_pairs = [(37, 5)]
        in_pg_pairs += [(0xffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff, 2)]
        out_res = execute_test_dh(in_pg_pairs)
        print("{0}: ".format(me) + "-" * 60)
        print("{0}: {1}".format(me, title))
        all_ok = True
        for i, res in enumerate(out_res):
            print("{0}: ".format(me) + "-" * 60)
            print("{0}: round    = [{1}]".format(me, i + 1))
            print("{0}: p        = [{1}]".format(me, in_pg_pairs[i][0]))
            print("{0}: g        = [{1}]".format(me, in_pg_pairs[i][1]))
            print("{0}: a        = [{1}]".format(me, res[0]))
            print("{0}: A        = [{1}]".format(me, res[1]))
            print("{0}: b        = [{1}]".format(me, res[2]))
            print("{0}: B        = [{1}]".format(me, res[3]))
            print("{0}: sA       = [{1}]".format(me, res[4]))
            print("{0}: sB       = [{1}]".format(me, res[5]))
            ok = res[4] == res[5]
            print("{0}: ok       = [{1}]".format(me, ok))
            all_ok = all_ok and ok
        if not all_ok:
            err_str = "\n{0}: ".format(me) + "-" * 60
            err_str += "\n{0}: TEST     = [FAILED] Result doesn't match expected.".format(me)
            err_str += "\n{0}: ".format(me) + "-" * 60
            raise Exception(err_str)
        print("{0}: ".format(me) + "-" * 60)
        print("{0}: TEST     = [OK]".format(me))
        print("{0}: ".format(me) + "-" * 60)
    except Exception:
        print("{0}: ".format(me) + "-" * 60)
        print("{0}: Caught ERROR EXCEPTION:".format(me))
        raise
    except:
        print("{0}: ".format(me) + "-" * 60)
        print("{0}: Caught UNEXPECTED EXCEPTION:".format(me))
        raise

    sys.exit(0)

